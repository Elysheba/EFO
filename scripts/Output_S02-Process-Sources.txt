> source('~/Shared/Data-Science/Data-Source-Model-Repository/EFO/scripts/S02-Process-Sources.R', echo=TRUE)

> rm(list = ls())

> gc()
          used (Mb) gc trigger  (Mb)  max used  (Mb)
Ncells 1128182 60.3    9348990 499.3   8933906 477.2
Vcells 6311929 48.2  105251576 803.1 110753555 845.0

> setwd("~/Shared/Data-Science/Data-Source-Model-Repository/EFO/scripts/")

> source("./S11-Read-obo.R")

> library(XML)

> library(parallel)

> library(git2r)

> library(RJSONIO)

> ##
> mc.cores <- 55

> sdir <- "../sources/efo"

> ddir <- "../data"

> ###############################################################################@
> ## Source information ----
> #################################### .... [TRUNCATED] 

> sourceFiles <- desc$"source files"

> sfi_name <- unlist(lapply(
+   sourceFiles,
+   function(sf){
+     toRet <- sf$"name"
+     return(toRet)
+   }
+ ))

> ###############################################################################@
> ## Data from efo.owl ----
> ##################################### .... [TRUNCATED] 

> readJson <- jsonlite::fromJSON(txt = file.path(sdir,"efo.json"))

> checkJson <- do.call(rbind,
+                  lapply(1:nrow(readJson$graphs$nodes[[1]]),
+                         function(i){
+                   .... [TRUNCATED] 

> table(checkJson$type)

   CLASS PROPERTY 
   80750      322 

> table(unique(checkJson$pred[checkJson$type == "CLASS"]) %in% 
+         unique(checkJson$pred[checkJson$pred == "PROPORTY"]))

FALSE  TRUE 
  201     1 

> ###########################################
> ## nodes (id, def, name, xref, label)
> nodesJson <- lapply(1:nrow(readJson$graphs$nodes[[1]]),
+      .... [TRUNCATED] 

> id <- do.call(rbind, lapply(nodesJson, function(x) x$id))

> xref <- do.call(rbind, lapply(nodesJson, function(x) x$xref))

> syn <- do.call(rbind, lapply(nodesJson, function(x) x$syn))

> ## edges (parents)
> # edgesJson <- readJson$graphs$edges[[1]]
> # edgesJson <- edgesJson[which(edgesJson$pred %in% c("is_a")),]
> # edgesJson$sub < .... [TRUNCATED] 

> ## Not the same amount of terms in obo and owl
> nf.obo <- id[!(id$id %in% obo$termDef$id),]

> w <- which(!is.na(as.numeric(gsub("^[^[:digit:]]*","",nf.obo$id))))

> table(gsub(":.*","",nf.obo[w,"id"]))

   BFO   BSPO  CHEBI    EFO    FMA     HP    IAO    OBI     RO    SIO UBPROP  UBREL 
     8     25      1     12      2      1     10      5     46      3     11      2 

> length(gsub(":.*","",nf.obo[w,"id"]))
[1] 126

> head(nf.obo[w,])
              id
1709 EFO:0006351
4481 IAO:0100001
4618 EFO:0005515
4620 EFO:0005516
6105  SIO:000658
6107  SIO:000657
                                                                                                                                                 def
1709                                                                                                                                            <NA>
4481 Use on obsolete terms, relating the term to another term that can be used as a substitute\n\nAdd as annotation triples in the granting ontology
4618                                                                                                                                            <NA>
4620                                                                                                                                            <NA>
6105                                                                                                                                            <NA>
6107                                                                                                                                            <NA>
                           label
1709                has_about_it
4481            term replaced by
4618                 has_p-value
4620             has_t-statistic
6105 immediate_transformation_of
6107           transformation_of

> nf.owl <- obo$termDef[!(obo$termDef$id %in% id$id),]

> ww <- which(!is.na(as.numeric(gsub("^[^[:digit:]]*","",nf.owl$id))))

> table(gsub(":.*","",nf.owl[ww,"id"]))

BFO 
  8 

> head(nf.owl[ww,])
           id
2 BFO:0000007
3 BFO:0000016
4 BFO:0000019
5 BFO:0000020
6 BFO:0000023
7 BFO:0000029
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           def
2                                                                                                                                                                                                                                                                                                      "A process is an entity that exists in time by occurring or happening, has temporal parts and always involves and depends on some entity during the time it occurs." []
3                                                                                "A disposition is an entity that causes a specific process or transformation in an entity in which it inheres, under specific circumstances and in conjunction with the laws of nature. For example, the disposition of vegetables to decay when not refrigerated, the disposition of blood to coagulate, the disposition of a patient with a weakened immune system to contract disease." []
4                                                                                                           "A quality is an entity that describes some aspect which is intrinsic to that particular object and is dependent on or more material entities in which it inheres in or is borne by. Example the color of a tomato, the ambient temperature of air, the circumference of a waist, the shape of a nose, the mass of a piece of gold, the weight of a chimpanzee" []
5                                                                                                                                                                                                                                                                                                                                        "An experimental factor which is a property or characteristic of some other entity.  For example, the mouse has the colour white." []
6 "A role is an entity which is borne in a material entity in some kinds of natural, social or institutional contexts, but which is not essential to the fundamental definition of that material entity (i.e. the material entity exists with or without the role).  For example, the role of a person as a surgeon, the role of an artificial heart in pumping blood, the role of a chemical compound in an experiment, the role of a drug in the treatment of a disease." []
7                                                                                                                                                                                                                                                                                                                                        "A site is an entity which consists of a characteristic spatial shape in relation to some arrangement of other material entities." []

> ## Get Parents
> edgesJson <- obo$termParents

> ## Remove NA in parent
> edgesJson <- edgesJson[!is.na(edgesJson$parent),]

> # getDescendants <- function(id){
> #   direct <- edgesJson[which(edgesJson$obj == id),"sub"]
> #   descendants <- direct
> #   level <- 0
> #   dLe .... [TRUNCATED] 

> diseaseO <- getDescendants("EFO:0000408")

> "EFO:0000408" %in% diseaseO$descendants
[1] TRUE

> length(diseaseO$descendants) ## 9209 ## About 200 IDs are missing parent information (are not a child themselves)
[1] 9210

> ## Check missing ids: EFO:0003769 and EFO:0002916
> c("EFO:0003769","EFO:0002916") %in% diseaseO$descendants
[1] TRUE TRUE

> # getAncestor <- function(id){
> #   direct <- edgesJson[which(edgesJson$sub == id),"obj"]
> #   ancestors <- direct
> #   level <- 0
> #   dLev <-  .... [TRUNCATED] 

> dim(crossId)
[1] 24369     2

> table(gsub(":.*","",crossId$id))

    DOID      EFO       HP Orphanet 
      33     8321        7    16008 

> names(crossId) <- c("dbid1","dbid2")

> crossId$DB2 <- gsub(":.*","",crossId$dbid2)

> crossId$DB1 <- gsub(":.*","",crossId$dbid1)

> crossId$id2 <- gsub(".*:","",crossId$dbid2)

> crossId$id1 <- gsub(".*:","",crossId$dbid1)

> dim(crossId)
[1] 24369     6

> ## remove ids with spaces
> ## keep output copy paste
> ## Remove crossIds without a colon (e.g. definitions, ...)
> head(grep(":",crossId$dbid1,inv .... [TRUNCATED] 
character(0)

> head(grep(":",crossId$dbid2,invert = T,value = T))
[1] "P24939585"    "DOID_0060078" "DOID_0060075" "D020144"      "D006432"      "D013036"     

> crossId <- crossId[grepl(":",crossId$dbid2) & grepl(":",crossId$dbid1) ,]

> dim(crossId)
[1] 24361     6

> ## Remove crossids with colon and space ": "
> head(grep(": ",crossId$dbid2,value = T))
[1] "SNOMEDCT: 274897005"         "NCI Metathesaurus: C1406910" "NCI Metathesaurus: C0085485" "NCI Metathesaurus: C1017212"
[5] "NCI Metathesaurus: C0038404" "NCI Metathesaurus: C0318594"

> head(grep(": ",crossId$dbid1,value = T))
character(0)

> crossId <- crossId[grep(": ",crossId$dbid2,invert = T),]

> dim(crossId)
[1] 24352     6

> ##
> ## an integer is a correct disease ID
> table(!is.na(as.numeric(crossId$id2)))

FALSE  TRUE 
12645 11707 

> table(!is.na(as.numeric(crossId$id1)))

 TRUE 
24352 

> toKeep <- crossId[which(!is.na(as.numeric(crossId$id2)) &
+                            !is.na(as.numeric(crossId$id1))),]

> dim(toKeep)
[1] 11707     6

> toCheck <- crossId[-which(!is.na(as.numeric(crossId$id2)) &
+                            !is.na(as.numeric(crossId$id1))),]

> dim(toCheck)
[1] 12645     6

> ## When removing prefix, an integer is a correct disease ID
> table(!is.na(as.numeric(sub("^[^[:digit:]]*", "", toCheck$id2))))

FALSE  TRUE 
  184 12461 

> table(!is.na(as.numeric(sub("^[^[:digit:]]*", "", toCheck$id1))))

 TRUE 
12645 

> toKeep <- rbind(toKeep, 
+                 toCheck[which(!is.na(as.numeric(sub("^[^[:digit:]]*", "", toCheck$id2))) &
+                              .... [TRUNCATED] 

> dim(toKeep)
[1] 24168     6

> toCheck <- toCheck[-which(!is.na(as.numeric(sub("^[^[:digit:]]*", "", toCheck$id2))) &
+                            !is.na(as.numeric(sub("^[^[:digi ..." ... [TRUNCATED] 

> dim(toCheck)
[1] 184   6

> ## Remove any DBs that are not disease DBs and DB1 can only be "EFO" or "Orphanet"
> ## check wrong IDs, remove weird ones still
> table(toCheck$DB2 .... [TRUNCATED] 

    https     ICD10      ICD9      ISBN       MSH Wikipedia 
        1        22        16         2         3       140 

> table(toCheck$DB1)

     EFO Orphanet 
     156       28 

> toCheck[toCheck$DB2 == "ICD9",]
            dbid1           dbid2  DB2 DB1        id2     id1
20684 EFO:0002422 ICD9:210-229.99 ICD9 EFO 210-229.99 0002422
20774 EFO:0003763 ICD9:430-438.99 ICD9 EFO 430-438.99 0003763
25325 EFO:0000341 ICD9:490-496.99 ICD9 EFO 490-496.99 0000341
26865 EFO:0001645 ICD9:410-414.99 ICD9 EFO 410-414.99 0001645
26993 EFO:0000319 ICD9:420-429.99 ICD9 EFO 420-429.99 0000319
27000 EFO:0000319 ICD9:390-459.99 ICD9 EFO 390-459.99 0000319
29377 EFO:0000537 ICD9:401-405.99 ICD9 EFO 401-405.99 0000537
30648 EFO:0000405 ICD9:570-579.99 ICD9 EFO 570-579.99 0000405
30649 EFO:0000405 ICD9:520-579.99 ICD9 EFO 520-579.99 0000405
30651 EFO:0000405 ICD9:560-569.99 ICD9 EFO 560-569.99 0000405
31888 EFO:0000764 ICD9:042-042.99 ICD9 EFO 042-042.99 0000764
32125 EFO:0000684 ICD9:500-508.99 ICD9 EFO 500-508.99 0000684
32137 EFO:0000684 ICD9:510-519.99 ICD9 EFO 510-519.99 0000684
32141 EFO:0000684 ICD9:460-519.99 ICD9 EFO 460-519.99 0000684
33278 EFO:0000616 ICD9:140-239.99 ICD9 EFO 140-239.99 0000616
33396 EFO:0000677 ICD9:290-299.99 ICD9 EFO 290-299.99 0000677

> toCheck[toCheck$DB2 == "ICD10",]
                dbid1        dbid2   DB2      DB1    id2    id1
6210   Orphanet:85458 ICD10:E85.4+ ICD10 Orphanet E85.4+  85458
6211   Orphanet:85458 ICD10:I68.0* ICD10 Orphanet I68.0*  85458
6242   Orphanet:85453 ICD10:E85.0+ ICD10 Orphanet E85.0+  85453
6244   Orphanet:85453 ICD10:L99.0* ICD10 Orphanet L99.0*  85453
18284 Orphanet:353220 ICD10:E85.4+ ICD10 Orphanet E85.4+ 353220
18285 Orphanet:353220 ICD10:L99.0* ICD10 Orphanet L99.0* 353220
24380 Orphanet:100006 ICD10:E85.4+ ICD10 Orphanet E85.4+ 100006
24381 Orphanet:100006 ICD10:I68.0* ICD10 Orphanet I68.0* 100006
24489 Orphanet:100008 ICD10:I68.0* ICD10 Orphanet I68.0* 100008
24491 Orphanet:100008 ICD10:E85.4+ ICD10 Orphanet E85.4+ 100008
38237   Orphanet:1930 ICD10:G05.1* ICD10 Orphanet G05.1*   1930
38238   Orphanet:1930 ICD10:B00.4+ ICD10 Orphanet B00.4+   1930
39585 Orphanet:324723 ICD10:I68.0* ICD10 Orphanet I68.0* 324723
39587 Orphanet:324723 ICD10:E85.4+ ICD10 Orphanet E85.4+ 324723
39595 Orphanet:324718 ICD10:E85.4+ ICD10 Orphanet E85.4+ 324718
39596 Orphanet:324718 ICD10:I68.0* ICD10 Orphanet I68.0* 324718
39598 Orphanet:324713 ICD10:E85.4+ ICD10 Orphanet E85.4+ 324713
39599 Orphanet:324713 ICD10:I68.0* ICD10 Orphanet I68.0* 324713
39664 Orphanet:324708 ICD10:E85.4+ ICD10 Orphanet E85.4+ 324708
39665 Orphanet:324708 ICD10:I68.0* ICD10 Orphanet I68.0* 324708
39674 Orphanet:324703 ICD10:E85.4+ ICD10 Orphanet E85.4+ 324703
39675 Orphanet:324703 ICD10:I68.0* ICD10 Orphanet I68.0* 324703

> toCheck[toCheck$DB2 == "https",]
            dbid1                                           dbid2   DB2 DB1                                       id2     id1
28692 EFO:1001250 https://en.wikipedia.org/wiki/Rotator_cuff_tear https EFO //en.wikipedia.org/wiki/Rotator_cuff_tear 1001250

> toCheck[toCheck$DB2 == "ISBN",]
            dbid1                  dbid2  DB2 DB1               id2     id1
27217 EFO:0000225 ISBN:978-0-387-84847-1 ISBN EFO 978-0-387-84847-1 0000225
27218 EFO:0000225 ISBN:978-0-387-84846-4 ISBN EFO 978-0-387-84846-4 0000225

> toCheck[toCheck$DB2 == "MSH",]
            dbid1    dbid2 DB2 DB1  id2     id1
42214 EFO:0007233 MSH:NoID MSH EFO NoID 0007233
44460 EFO:0007422 MSH:NoID MSH EFO NoID 0007422
44714 EFO:0007441 MSH:NoID MSH EFO NoID 0007441

> head(toCheck[toCheck$DB2 == "Wikipedia",])
            dbid1                                                 dbid2       DB2      DB1
2382 Orphanet:218                          Wikipedia:Darier%27s_disease Wikipedia Orphanet
3812 Orphanet:305 Wikipedia:Junctional_epidermolysis_bullosa_(medicine) Wikipedia Orphanet
4507  EFO:0006738                                Wikipedia:Plasmacytoma Wikipedia      EFO
5993  EFO:0005250                         Wikipedia:Occupational_stress Wikipedia      EFO
6047  EFO:0005223                       Wikipedia:Acute_stress_reaction Wikipedia      EFO
6050  EFO:0005223                       Wikipedia:Acute_stress_reaction Wikipedia      EFO
                                             id2     id1
2382                          Darier%27s_disease     218
3812 Junctional_epidermolysis_bullosa_(medicine)     305
4507                                Plasmacytoma 0006738
5993                         Occupational_stress 0005250
6047                       Acute_stress_reaction 0005223
6050                       Acute_stress_reaction 0005223

> table(toKeep$DB2)

              DOID                 EV                 HP              ICD10               ICD9             ICD9CM 
              1828                  2                 26               5345                400                 10 
               IDO             MedDRA             MEDDRA        MedlinePlus              MeDRA               MESH 
                 1               1012                  1                  1                  1                  3 
             MONDO                 MP                MSH                NCI  NCI_Metathesaurus               NCiT 
                 6                  6               3103                  1                  1                  1 
              NCIt               NCIT             NIFSTD                OBI               OMIM               ORDO 
              1635                  7                 26                  1               7195                 56 
              PMID           SNOMEDCT SNOMEDCT_2010_1_31          SNOWMEDCT               UMLS           UMLS_CUI 
                26               1184                 26                  1               2259                  3 
           UniProt 
                 1 

> table(toKeep$DB1)

    DOID      EFO       HP Orphanet 
      33     8148        7    15980 

> crossId <- setNames(toKeep[,c("dbid1","dbid2")],c("id1","id2"))

> dim(crossId)
[1] 24168     2

> head(crossId)
           id1         id2
1 Orphanet:124 OMIM:105650
2 Orphanet:124 OMIM:606164
4 Orphanet:124 OMIM:612563
5 Orphanet:124 OMIM:612562
6 Orphanet:124 OMIM:612561
7 Orphanet:124 OMIM:612528

> ## correct ORDO:Orphanet_ wrong encodings
> crossId$id2 <- gsub(paste("Orphanet_","ORDO:",sep = "|"),"ORPHA:",crossId$id2)

> crossId$id2 <- gsub("MESH","MeSH",crossId$id2)

> crossId$id2 <- gsub("MSH","MeSH",crossId$id2)

> crossId$id2 <- gsub("NCI_Thesaurus","NCIt",crossId$id2)

> crossId$id2 <- gsub("NCiT","NCIt",crossId$id2)

> crossId$id2 <- gsub("NCIT","NCIt",crossId$id2)

> crossId$id2 <- gsub("SNOWMEDCT","SNOMEDCT",crossId$id2)

> crossId$id2 <- gsub("UMLS","MedGen",crossId$id2)

> crossId$id1 <- gsub("Orphanet","ORPHA",crossId$id1)

> table(gsub(":.*","",crossId$id1))

 DOID   EFO    HP ORPHA 
   33  8148     7 15980 

> table(gsub(":.*","",crossId$id2))

              DOID                 EV                 HP              ICD10               ICD9             ICD9CM 
              1828                  2                 26               5345                400                 10 
               IDO             MedDRA             MEDDRA             MedGen         MedGen_CUI        MedlinePlus 
                 1               1012                  1               2259                  3                  1 
             MeDRA               MeSH              MONDO                 MP                NCI  NCI_Metathesaurus 
                 1               3106                  6                  6                  1                  1 
              NCIt             NIFSTD                OBI               OMIM              ORPHA               PMID 
              1643                 26                  1               7195                 56                 26 
          SNOMEDCT SNOMEDCT_2010_1_31            UniProt 
              1185                 26                  1 

> crossId$DB2 <- gsub(":.*","",crossId$id2)

> crossId$DB1 <- gsub(":.*","",crossId$id1)

> ## Remove self references
> crossId[which(crossId$id1 == crossId$id2),]
              id1         id2   DB2   DB1
717     ORPHA:167   ORPHA:167 ORPHA ORPHA
3250    DOID:7551   DOID:7551  DOID  DOID
5752  ORPHA:98702 ORPHA:98702 ORPHA ORPHA
9294   DOID:13406  DOID:13406  DOID  DOID
24164  DOID:10113  DOID:10113  DOID  DOID
28091  DOID:10718  DOID:10718  DOID  DOID
38060   DOID:1947   DOID:1947  DOID  DOID
39817   ORPHA:931   ORPHA:931 ORPHA ORPHA

> dim(crossId)
[1] 24168     4

> crossId <- crossId[-which(crossId$id1 == crossId$id2),]

> dim(crossId)
[1] 24160     4

> ######################################
> ## entryId
> entryId <- id[id$id %in% diseaseO$descendants,]

> head(entryId)
               id
1    Orphanet:124
2 Orphanet:199315
3    Orphanet:123
4    Orphanet:126
5 Orphanet:209203
6   Orphanet:2560
                                                                                                                                                                                                                                                                                    def
1                                                                                                                                                                                                                                                                                  <NA>
2                                                                                                                                                                                                                                                                                  <NA>
3                                                                                                                                                                                                                                                                                  <NA>
4 Blepharophimosis ptosis epicanthus inversus syndrome (BPES) is an ophthalmic disorder, characterized by blepharophimosis, ptosis, epicanthus inversus, and telecanthus, that can appear associated with premature ovarian failure (POF; see this term)(type I) or isolated (type II).
5                                                                                                                                                                                                                                                                                  <NA>
6                                                                                                                                                                                                                                                                                  <NA>
                                                                                                       label
1                                                                                    Blackfan-Diamond anemia
2                                          Familial clubfoot with or without associated lower limb anomalies
3                                                                                         Björnstad syndrome
4                                                            Blepharophimosis - epicanthus inversus - ptosis
5 Qualitative or quantitative defects of glucosamine (UDP-N-acetyl)-2-epimerase/N-acetylmannosamine kinase -
6                                        Möbius syndrome - axonal neuropathy - hypogonadotropic hypogonadism

> dim(entryId)
[1] 9210    3

> table(gsub(":.*","",entryId$id))

    DOID      EFO       HP Orphanet 
       6     3001        1     6202 

> ## Empty definition to NA
> nc <- nchar(entryId$def)

> head(table(nc), n = 20)
nc
 1  2  4  8 12 13 15 16 18 19 20 21 22 23 24 25 26 27 28 29 
 1  3  4  1  2  1  1  2  1  3  1  1  1  2  3  3  2  3  3  5 

> entryId[which(nc < 16),]
                   id             def                                                                                 label
223      Orphanet:199              ).                                                            Cornelia de Lange syndrome
2540  Orphanet:319552     infections. Mendelian susceptibility to mycobacterial diseases due to complete IL12RB1 deficiency
2560  Orphanet:319558     infections.   Mendelian susceptibility to mycobacterial diseases due to complete IL12B deficiency
4400     Orphanet:622            v1).                                         Homocystinuria without methylmalonic aciduria
6095    Orphanet:1334               .                                                      Chronic mucocutaneous candidosis
7294   Orphanet:53719            ANPM                                                                 Wyburn-Mason syndrome
13061  Orphanet:79450              ).                                          Non hereditary congenital primary lymphedema
13631     Orphanet:28            v2).                                         Vitamin B12-responsive methylmalonic acidemia
16754 Orphanet:280229    gene (Xq22).                                       Pelizaeus-Merzbacher disease in female carriers
17634 Orphanet:324977  gene (6p21.3).                                                        Proteasome disability syndrome
19639 Orphanet:324575        #945;)'.                                               Hyperinsulinism due to HNF1A deficiency
19783  Orphanet:93274              ).                                                        Thanatophoric dysplasia type 2
20670  Orphanet:79193            ANPM                                                     Disorder of pyrimidine metabolism

> entryId[which(nc < 16),"def"] <- NA

> ## Check characters for \t, \n, \r and put to ASCII
> entryId$def <- iconv(x = entryId$def,to="ASCII//TRANSLIT")

> table(unlist(sapply(entryId$def, strsplit, split = "")))

    \t     \n             _      -      ,      ;      :      ?      .      '      "      (      )      [      ]      *      / 
     1     50 165261   1897   2873  11268   1043    252     49   8836    170     67   3724   3737     40     39      1    386 
    \\      &      #      %      `      +      <      =      >      0      1      2      3      4      5      6      7      8 
     4     45      3     98      5     19      2     42      5    468   1136    853    463    319    362    321    257    215 
     9      a      A      b      B      c      C      d      D      e      E      f      F      g      G      h      H      i 
   339  89003   6364  13473   1144  42841   3192  37148   2204 106055   3638  20027    865  14956    889  33748   1964  82173 
     I      j      J      k      K      l      L      m      M      n      N      o      O      p      P      q      Q      r 
  4891    616    217   2881    276  47186   2234  32521   2193  66062   2407  70102   2574  23786   2326    663     26  65152 
     R      s      S      t      T      u      U      v      V      w      W      x      X      y      Y      z      Z 
  2905  69151   3750  73248   3934  24344   1103   8819    585   6015    298   2311    368  23470    827   3048     57 

> entryId$def <- gsub(paste("\n","\t","\r", sep = "|")," ",entryId$def)

> table(unlist(sapply(entryId$def, strsplit, split = "")))

            _      -      ,      ;      :      ?      .      '      "      (      )      [      ]      *      /     \\      & 
165312   1897   2873  11268   1043    252     49   8836    170     67   3724   3737     40     39      1    386      4     45 
     #      %      `      +      <      =      >      0      1      2      3      4      5      6      7      8      9      a 
     3     98      5     19      2     42      5    468   1136    853    463    319    362    321    257    215    339  89003 
     A      b      B      c      C      d      D      e      E      f      F      g      G      h      H      i      I      j 
  6364  13473   1144  42841   3192  37148   2204 106055   3638  20027    865  14956    889  33748   1964  82173   4891    616 
     J      k      K      l      L      m      M      n      N      o      O      p      P      q      Q      r      R      s 
   217   2881    276  47186   2234  32521   2193  66062   2407  70102   2574  23786   2326    663     26  65152   2905  69151 
     S      t      T      u      U      v      V      w      W      x      X      y      Y      z      Z 
  3750  73248   3934  24344   1103   8819    585   6015    298   2311    368  23470    827   3048     57 

> ## Change " to '
> entryId$def <- gsub("\"","'",entryId$def)

> table(gsub(":.*","",entryId$id))

    DOID      EFO       HP Orphanet 
       6     3001        1     6202 

> entryId$id <- gsub("Orphanet","ORPHA",entryId$id)

> entryId$DB <- gsub(":.*","",entryId$id)

> entryId <- entryId[,c("DB","id","def")]

> table(gsub(":.*","",entryId$id))

 DOID   EFO    HP ORPHA 
    6  3001     1  6202 

> ## Check duplicated records
> dim(entryId)
[1] 9210    3

> length(unique(entryId[,"id"]))
[1] 9210

> ## all crossId$id1 in entryId
> table(crossId$id1 %in% entryId$id)

 TRUE 
24160 

> ######################################
> ## idNames
> idNames <- syn[syn$id %in% diseaseO$descendants,]

> head(idNames)
            id                                                  syn
1 Orphanet:124                                      Congenital PRCA
2 Orphanet:124                                        Aase syndrome
3 Orphanet:124                     Congenital pure red cell aplasia
4 Orphanet:124                               Aase-Smith II syndrome
5 Orphanet:124 Congenital hypoplastic anemia, Blackfan-Diamond type
6 Orphanet:123                 Deafness - pili torti - hypogonadism

> dim(idNames)
[1] 20539     2

> table(gsub(":.*","",idNames$id))

    DOID      EFO       HP Orphanet 
       7    11975        6     8551 

> ## Labels
> lbl <- id[id$id %in% diseaseO$descendants,c("id","label")]

> table(gsub(":.*","",lbl$id))

    DOID      EFO       HP Orphanet 
       6     3001        1     6202 

> unique(grep("#",lbl$id, value =T))
character(0)

> head(lbl)
               id                                                                                                      label
1    Orphanet:124                                                                                    Blackfan-Diamond anemia
2 Orphanet:199315                                          Familial clubfoot with or without associated lower limb anomalies
3    Orphanet:123                                                                                         Björnstad syndrome
4    Orphanet:126                                                            Blepharophimosis - epicanthus inversus - ptosis
5 Orphanet:209203 Qualitative or quantitative defects of glucosamine (UDP-N-acetyl)-2-epimerase/N-acetylmannosamine kinase -
6   Orphanet:2560                                        Möbius syndrome - axonal neuropathy - hypogonadotropic hypogonadism

> # lbl <- lbl[grep("#",lbl$id,invert = T, value = F),]
> 
> ## 
> idNames <- rbind(idNames,setNames(lbl, nm = names(idNames)))

> head(idNames)
            id                                                  syn
1 Orphanet:124                                      Congenital PRCA
2 Orphanet:124                                        Aase syndrome
3 Orphanet:124                     Congenital pure red cell aplasia
4 Orphanet:124                               Aase-Smith II syndrome
5 Orphanet:124 Congenital hypoplastic anemia, Blackfan-Diamond type
6 Orphanet:123                 Deafness - pili torti - hypogonadism

> dim(idNames)
[1] 29749     2

> idNames$id <- gsub("Orphanet","ORPHA",idNames$id)

> idNames$DB <- gsub(":.*","",idNames$id)

> idNames$canonical <- ifelse(idNames$syn %in% lbl$label, TRUE, FALSE)

> ## Remove duplicated entries but keep all labels 
> dim(idNames)
[1] 29749     4

> dim(unique(idNames))
[1] 29719     4

> idNames <- idNames[order(idNames$canonical,decreasing = T),]

> idNames <- unique(idNames)

> dim(idNames)
[1] 29719     4

> ## Check characters for \t, \n, \r and put to ASCII
> idNames$syn <- iconv(x = idNames$syn,to="ASCII//TRANSLIT")

> table(unlist(sapply(idNames$syn, strsplit, split = "")))

   \n           _     -     ,     ;     :     ?     .     '     "     (     )     [     ]     @     /     &     +     <     | 
   17 72132     1  7806  4326     7    15     5   353   434     6  1842  1841   252   252     1   248    24    26     1     5 
    0     1     2     3     4     5     6     7     8     9     a     A     b     B     c     C     d     D     e     E     f 
  254  2267  1641   829   562   361   383   277   191   210 64549  5663  6623  2223 31707  6471 29331  4536 74741  2867 10044 
    F     g     G     h     H     i     I     j     J     k     K     l     L     m     M     n     N     o     O     p     P 
 1792  9399  2270 17810  2863 65364  3915   351   279  2981   630 40719  3773 29358  4433 44372  3474 60779  2903 22206  4548 
    q     Q     r     R     s     S     t     T     u     U     v     V     w     W     x     X     y     Y     z     Z 
  963    97 49592  2346 48381  5564 45340  2874 18816   931  4873   789  2050   490  1851   852 26284   502   692    83 

> idNames$syn <- gsub(paste("\n","\t","\r", sep = "|")," ",idNames$syn)

> table(unlist(sapply(idNames$syn, strsplit, split = "")))

          _     -     ,     ;     :     ?     .     '     "     (     )     [     ]     @     /     &     +     <     |     0 
72149     1  7806  4326     7    15     5   353   434     6  1842  1841   252   252     1   248    24    26     1     5   254 
    1     2     3     4     5     6     7     8     9     a     A     b     B     c     C     d     D     e     E     f     F 
 2267  1641   829   562   361   383   277   191   210 64549  5663  6623  2223 31707  6471 29331  4536 74741  2867 10044  1792 
    g     G     h     H     i     I     j     J     k     K     l     L     m     M     n     N     o     O     p     P     q 
 9399  2270 17810  2863 65364  3915   351   279  2981   630 40719  3773 29358  4433 44372  3474 60779  2903 22206  4548   963 
    Q     r     R     s     S     t     T     u     U     v     V     w     W     x     X     y     Y     z     Z 
   97 49592  2346 48381  5564 45340  2874 18816   931  4873   789  2050   490  1851   852 26284   502   692    83 

> ## Change " to '
> idNames$syn <- gsub("\"","'",idNames$syn)

> ## Remove empty syn
> table(is.na(idNames$syn))

FALSE 
29719 

> ## idNames <- idNames[!is.na(idNames$syn),]
> dim(idNames)
[1] 29719     4

> ## all idNames in entryId
> table(idNames$id %in% entryId$id)

 TRUE 
29719 

> ## Remove empty names, ifany
> nc <- nchar(idNames$syn)

> table(nc)
nc
  2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32 
 44 336 520 497 228 145 145 186 251 379 479 602 818 776 788 792 875 842 889 879 957 926 965 856 798 796 799 860 781 730 690 
 33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63 
643 585 552 496 468 387 402 350 355 324 357 347 294 285 259 278 293 253 177 218 210 164 147 136 148 150 134 113 127  95  81 
 64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94 
 93  84  86  76  75  67  67  56  49  56  44  35  37  25  31  30  27  20  15  23  19  12  23  21  13  11  14  13  10  10   9 
 95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 121 123 124 127 131 139 
 11   9  12   6  10   8   4   3   2   2   3   8   4   2   2   1   1   3   2   1   1   1   1   1   3   3   3   2   1   1 

> head(idNames[which(nc == 6),])
               id    syn    DB canonical
18011 ORPHA:98578 Ptosis ORPHA      TRUE
41611 EFO:0004283 goiter   EFO      TRUE
48641 EFO:0005543 glioma   EFO      TRUE
48741 EFO:0004212 Keloid   EFO      TRUE
4943  EFO:0004152 chorea   EFO      TRUE
75241 EFO:1000997 iritis   EFO      TRUE

> head(idNames[which(nc < 15 & idNames$canonical == FALSE),])
             id            syn    DB canonical
2     ORPHA:124  Aase syndrome ORPHA     FALSE
8     ORPHA:125           BSyn ORPHA     FALSE
18 ORPHA:199318 Del(15)(q13.3) ORPHA     FALSE
20    ORPHA:127           BFLS ORPHA     FALSE
51    ORPHA:113           BDCS ORPHA     FALSE
56    ORPHA:115 Beals syndrome ORPHA     FALSE

> ## Remove names of 0 or 1 character long
> idNames[which(nc == 0),]
[1] id        syn       DB        canonical
<0 rows> (or 0-length row.names)

> idNames[which(nc == 1),]
[1] id        syn       DB        canonical
<0 rows> (or 0-length row.names)

> # idNames <- idNames[-which(nc == 0),]
> 
> ## All idnames in entryid
> table(idNames$id %in% entryId$id)

 TRUE 
29719 

> ######################################
> ## parentId
> # parentId <- edgesJson[which(edgesJson$obj %in% diseaseO$descendants),c("sub","obj")]
> pare .... [TRUNCATED] 

> names(parentId) <- c("id","parent")

> table(gsub(":.*","",parentId$id))

    DOID      EFO       HP Orphanet 
       6     3757        1    10189 

> table(gsub(":.*","",parentId$parent))

    DOID      EFO Orphanet 
       2     3868    10083 

> parentId$id <- gsub("Orphanet","ORPHA",parentId$id)

> parentId$parent <- gsub("Orphanet","ORPHA",parentId$parent)

> parentId$DB <- gsub(":.*","",parentId$id)

> parentId$pDB <- gsub(":.*","",parentId$parent)

> ## All idnames in entryid
> table(parentId$id %in% entryId$id)

 TRUE 
13953 

> table(parentId$parent %in% entryId$id)

 TRUE 
13953 

> ## "Disease" itself is not in entryId --> OK
> ep <- parentId[!(parentId$parent %in% entryId$id),]

> # ep[ep$parent == "EFO:1001901",]
> 
> #######################################
> crossId$id1 <- gsub(".*:","",crossId$id1)

> crossId$id2 <- gsub(".*:","",crossId$id2)

> entryId$id <- gsub(".*:","",entryId$id)

> parentId$id <- gsub(".*:","",parentId$id)

> parentId$parent <- gsub(".*:","",parentId$parent)

> idNames$id <- gsub(".*:","",idNames$id)

> ############################
> EFO_idNames <- idNames[,c("DB","id","syn","canonical")]

> EFO_parentId <- parentId[,c("DB","id","pDB","parent")]

> EFO_crossId <- crossId[,c("DB1","id1","DB2","id2")]

> EFO_entryId <- entryId[,c("DB","id","def")]

> ############################
> toSave <- grep("^EFO[_]", ls(), value=T)

> for(f in toSave){
+   message(paste("Saving", f))
+   print(file.path(ddir, paste(f, ".txt", sep="")))
+   ## Ensure unicity
+   assign(f, get(f))
+ .... [TRUNCATED] 
Saving EFO_crossId
[1] "../data/EFO_crossId.txt"
Saving EFO_entryId
[1] "../data/EFO_entryId.txt"
Saving EFO_idNames
[1] "../data/EFO_idNames.txt"
Saving EFO_parentId
[1] "../data/EFO_parentId.txt"
Warning messages:
1: In which(!is.na(as.numeric(gsub("^[^[:digit:]]*", "", nf.obo$id)))) :
  NAs introduced by coercion
2: In table(!is.na(as.numeric(crossId$id2))) : NAs introduced by coercion
3: In which(!is.na(as.numeric(crossId$id2)) & !is.na(as.numeric(crossId$id1))) :
  NAs introduced by coercion
4: In which(!is.na(as.numeric(crossId$id2)) & !is.na(as.numeric(crossId$id1))) :
  NAs introduced by coercion
5: In table(!is.na(as.numeric(sub("^[^[:digit:]]*", "", toCheck$id2)))) :
  NAs introduced by coercion
6: In which(!is.na(as.numeric(sub("^[^[:digit:]]*", "", toCheck$id2))) &  :
  NAs introduced by coercion
7: In which(!is.na(as.numeric(sub("^[^[:digit:]]*", "", toCheck$id2))) &  :
  NAs introduced by coercion